// Generated by CoffeeScript 1.6.3
(function() {
  var generate_groupings;

  generate_groupings = function(num_students, num_groups) {
    /*
    	Generates all possible groupings of num_students students 
    	into int num_groups groups. 
    
    	Parameters
    	__________
    
    	num_students : type int 
    		number of students
    
    	num_groups : type int 
    		number of groups
    
    	Returns
    	_______ 
    
    	groups : type list[list]
    		
    		list of lists, with each element representing a allocation of students
    		into groups e.g. 
    
    		groups = [0, 2, 1]
    
    		means student 0 is in group 0, student 1 in group 2, student 2 in group 1.
    
    	Raises
    	______ 
    
    	ValueError : if number of groups exceedes number of students
    */

    var group, group_index, groups, new_group, new_groups, student_index, x, _i, _j, _k, _len;
    if (num_students < num_groups) {
      console.log('number of groups must be less than or equal to number of students');
      return;
    }
    groups = (function() {
      var _i, _results;
      _results = [];
      for (x = _i = 1; 1 <= num_groups ? _i <= num_groups : _i >= num_groups; x = 1 <= num_groups ? ++_i : --_i) {
        _results.push([x]);
      }
      return _results;
    })();
    console.log(groups);
    for (student_index = _i = 2; 2 <= num_students ? _i <= num_students : _i >= num_students; student_index = 2 <= num_students ? ++_i : --_i) {
      new_groups = [];
      for (_j = 0, _len = groups.length; _j < _len; _j++) {
        group = groups[_j];
        for (group_index = _k = 1; 1 <= num_groups ? _k <= num_groups : _k >= num_groups; group_index = 1 <= num_groups ? ++_k : --_k) {
          new_group = group.concat([group_index]);
          new_groups.push(new_group);
        }
      }
      groups = new_groups;
    }
    return groups;
  };

  console.log(generate_groupings(4, 3));

}).call(this);
